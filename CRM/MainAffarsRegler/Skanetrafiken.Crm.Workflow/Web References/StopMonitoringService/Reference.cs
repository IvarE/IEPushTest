//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Skanetrafiken.Crm.StopMonitoringService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="StopMonitoringService", Namespace="http://tempuri.org/")]
    public partial class StopMonitoringService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetDeparturesAtStopOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDirectJourneysBetweenStopsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCallsAtStopOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public StopMonitoringService() {
            this.Url = global::Skanetrafiken.Crm.Properties.Settings.Default.Skanetrafiken_Crm_Workflow_StopMonitoringService_StopMonitoringService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetDeparturesAtStopCompletedEventHandler GetDeparturesAtStopCompleted;
        
        /// <remarks/>
        public event GetDirectJourneysBetweenStopsCompletedEventHandler GetDirectJourneysBetweenStopsCompleted;
        
        /// <remarks/>
        public event GetCallsAtStopCompletedEventHandler GetCallsAtStopCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.pubtrans.hogia.se/webservices/dataset/2008/11/StopMonitoringServic" +
            "e/IStopMonitoringService/GetDeparturesAtStop", RequestNamespace="http://schemas.pubtrans.hogia.se/webservices/dataset/2008/11/StopMonitoringServic" +
            "e", ResponseNamespace="http://schemas.pubtrans.hogia.se/webservices/dataset/2008/11/StopMonitoringServic" +
            "e", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet GetDeparturesAtStop([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string atStopGid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string forDirectionOfLineGids, System.DateTime forTimeWindowStartDateTime, [System.Xml.Serialization.XmlIgnoreAttribute()] bool forTimeWindowStartDateTimeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<byte> forTimeWindowDuration, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool forTimeWindowDurationSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> withDepartureMaxCount, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool withDepartureMaxCountSpecified) {
            object[] results = this.Invoke("GetDeparturesAtStop", new object[] {
                        atStopGid,
                        forDirectionOfLineGids,
                        forTimeWindowStartDateTime,
                        forTimeWindowStartDateTimeSpecified,
                        forTimeWindowDuration,
                        forTimeWindowDurationSpecified,
                        withDepartureMaxCount,
                        withDepartureMaxCountSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeparturesAtStopAsync(string atStopGid, string forDirectionOfLineGids, System.DateTime forTimeWindowStartDateTime, bool forTimeWindowStartDateTimeSpecified, System.Nullable<byte> forTimeWindowDuration, bool forTimeWindowDurationSpecified, System.Nullable<int> withDepartureMaxCount, bool withDepartureMaxCountSpecified) {
            this.GetDeparturesAtStopAsync(atStopGid, forDirectionOfLineGids, forTimeWindowStartDateTime, forTimeWindowStartDateTimeSpecified, forTimeWindowDuration, forTimeWindowDurationSpecified, withDepartureMaxCount, withDepartureMaxCountSpecified, null);
        }
        
        /// <remarks/>
        public void GetDeparturesAtStopAsync(string atStopGid, string forDirectionOfLineGids, System.DateTime forTimeWindowStartDateTime, bool forTimeWindowStartDateTimeSpecified, System.Nullable<byte> forTimeWindowDuration, bool forTimeWindowDurationSpecified, System.Nullable<int> withDepartureMaxCount, bool withDepartureMaxCountSpecified, object userState) {
            if ((this.GetDeparturesAtStopOperationCompleted == null)) {
                this.GetDeparturesAtStopOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeparturesAtStopOperationCompleted);
            }
            this.InvokeAsync("GetDeparturesAtStop", new object[] {
                        atStopGid,
                        forDirectionOfLineGids,
                        forTimeWindowStartDateTime,
                        forTimeWindowStartDateTimeSpecified,
                        forTimeWindowDuration,
                        forTimeWindowDurationSpecified,
                        withDepartureMaxCount,
                        withDepartureMaxCountSpecified}, this.GetDeparturesAtStopOperationCompleted, userState);
        }
        
        private void OnGetDeparturesAtStopOperationCompleted(object arg) {
            if ((this.GetDeparturesAtStopCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeparturesAtStopCompleted(this, new GetDeparturesAtStopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.pubtrans.hogia.se/webservices/dataset/2008/11/StopMonitoringServic" +
            "e/IStopMonitoringService/GetDirectJourneysBetweenStops", RequestNamespace="http://schemas.pubtrans.hogia.se/webservices/dataset/2008/11/StopMonitoringServic" +
            "e", ResponseNamespace="http://schemas.pubtrans.hogia.se/webservices/dataset/2008/11/StopMonitoringServic" +
            "e", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet GetDirectJourneysBetweenStops([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fromStopAreaGid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string toStopAreaGid, System.DateTime forTimeWindowStartDateTime, [System.Xml.Serialization.XmlIgnoreAttribute()] bool forTimeWindowStartDateTimeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<byte> forTimeWindowDuration, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool forTimeWindowDurationSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> withDepartureMaxCount, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool withDepartureMaxCountSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string forLineGids, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string forProducts, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string purposeOfLineGroupingCode) {
            object[] results = this.Invoke("GetDirectJourneysBetweenStops", new object[] {
                        fromStopAreaGid,
                        toStopAreaGid,
                        forTimeWindowStartDateTime,
                        forTimeWindowStartDateTimeSpecified,
                        forTimeWindowDuration,
                        forTimeWindowDurationSpecified,
                        withDepartureMaxCount,
                        withDepartureMaxCountSpecified,
                        forLineGids,
                        forProducts,
                        purposeOfLineGroupingCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDirectJourneysBetweenStopsAsync(string fromStopAreaGid, string toStopAreaGid, System.DateTime forTimeWindowStartDateTime, bool forTimeWindowStartDateTimeSpecified, System.Nullable<byte> forTimeWindowDuration, bool forTimeWindowDurationSpecified, System.Nullable<int> withDepartureMaxCount, bool withDepartureMaxCountSpecified, string forLineGids, string forProducts, string purposeOfLineGroupingCode) {
            this.GetDirectJourneysBetweenStopsAsync(fromStopAreaGid, toStopAreaGid, forTimeWindowStartDateTime, forTimeWindowStartDateTimeSpecified, forTimeWindowDuration, forTimeWindowDurationSpecified, withDepartureMaxCount, withDepartureMaxCountSpecified, forLineGids, forProducts, purposeOfLineGroupingCode, null);
        }
        
        /// <remarks/>
        public void GetDirectJourneysBetweenStopsAsync(string fromStopAreaGid, string toStopAreaGid, System.DateTime forTimeWindowStartDateTime, bool forTimeWindowStartDateTimeSpecified, System.Nullable<byte> forTimeWindowDuration, bool forTimeWindowDurationSpecified, System.Nullable<int> withDepartureMaxCount, bool withDepartureMaxCountSpecified, string forLineGids, string forProducts, string purposeOfLineGroupingCode, object userState) {
            if ((this.GetDirectJourneysBetweenStopsOperationCompleted == null)) {
                this.GetDirectJourneysBetweenStopsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDirectJourneysBetweenStopsOperationCompleted);
            }
            this.InvokeAsync("GetDirectJourneysBetweenStops", new object[] {
                        fromStopAreaGid,
                        toStopAreaGid,
                        forTimeWindowStartDateTime,
                        forTimeWindowStartDateTimeSpecified,
                        forTimeWindowDuration,
                        forTimeWindowDurationSpecified,
                        withDepartureMaxCount,
                        withDepartureMaxCountSpecified,
                        forLineGids,
                        forProducts,
                        purposeOfLineGroupingCode}, this.GetDirectJourneysBetweenStopsOperationCompleted, userState);
        }
        
        private void OnGetDirectJourneysBetweenStopsOperationCompleted(object arg) {
            if ((this.GetDirectJourneysBetweenStopsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDirectJourneysBetweenStopsCompleted(this, new GetDirectJourneysBetweenStopsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.pubtrans.hogia.se/webservices/dataset/2008/11/StopMonitoringServic" +
            "e/IStopMonitoringService/GetCallsAtStop", RequestNamespace="http://schemas.pubtrans.hogia.se/webservices/dataset/2008/11/StopMonitoringServic" +
            "e", ResponseNamespace="http://schemas.pubtrans.hogia.se/webservices/dataset/2008/11/StopMonitoringServic" +
            "e", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet GetCallsAtStop([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string atStopGid, System.DateTime forTimeWindowStartDateTime, [System.Xml.Serialization.XmlIgnoreAttribute()] bool forTimeWindowStartDateTimeSpecified, int forTimeWindowDurationMinutes, [System.Xml.Serialization.XmlIgnoreAttribute()] bool forTimeWindowDurationMinutesSpecified, bool includeArrivalsTable, [System.Xml.Serialization.XmlIgnoreAttribute()] bool includeArrivalsTableSpecified, bool includeDeparturesTable, [System.Xml.Serialization.XmlIgnoreAttribute()] bool includeDeparturesTableSpecified, bool includeDeviationTables, [System.Xml.Serialization.XmlIgnoreAttribute()] bool includeDeviationTablesSpecified) {
            object[] results = this.Invoke("GetCallsAtStop", new object[] {
                        atStopGid,
                        forTimeWindowStartDateTime,
                        forTimeWindowStartDateTimeSpecified,
                        forTimeWindowDurationMinutes,
                        forTimeWindowDurationMinutesSpecified,
                        includeArrivalsTable,
                        includeArrivalsTableSpecified,
                        includeDeparturesTable,
                        includeDeparturesTableSpecified,
                        includeDeviationTables,
                        includeDeviationTablesSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCallsAtStopAsync(string atStopGid, System.DateTime forTimeWindowStartDateTime, bool forTimeWindowStartDateTimeSpecified, int forTimeWindowDurationMinutes, bool forTimeWindowDurationMinutesSpecified, bool includeArrivalsTable, bool includeArrivalsTableSpecified, bool includeDeparturesTable, bool includeDeparturesTableSpecified, bool includeDeviationTables, bool includeDeviationTablesSpecified) {
            this.GetCallsAtStopAsync(atStopGid, forTimeWindowStartDateTime, forTimeWindowStartDateTimeSpecified, forTimeWindowDurationMinutes, forTimeWindowDurationMinutesSpecified, includeArrivalsTable, includeArrivalsTableSpecified, includeDeparturesTable, includeDeparturesTableSpecified, includeDeviationTables, includeDeviationTablesSpecified, null);
        }
        
        /// <remarks/>
        public void GetCallsAtStopAsync(string atStopGid, System.DateTime forTimeWindowStartDateTime, bool forTimeWindowStartDateTimeSpecified, int forTimeWindowDurationMinutes, bool forTimeWindowDurationMinutesSpecified, bool includeArrivalsTable, bool includeArrivalsTableSpecified, bool includeDeparturesTable, bool includeDeparturesTableSpecified, bool includeDeviationTables, bool includeDeviationTablesSpecified, object userState) {
            if ((this.GetCallsAtStopOperationCompleted == null)) {
                this.GetCallsAtStopOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCallsAtStopOperationCompleted);
            }
            this.InvokeAsync("GetCallsAtStop", new object[] {
                        atStopGid,
                        forTimeWindowStartDateTime,
                        forTimeWindowStartDateTimeSpecified,
                        forTimeWindowDurationMinutes,
                        forTimeWindowDurationMinutesSpecified,
                        includeArrivalsTable,
                        includeArrivalsTableSpecified,
                        includeDeparturesTable,
                        includeDeparturesTableSpecified,
                        includeDeviationTables,
                        includeDeviationTablesSpecified}, this.GetCallsAtStopOperationCompleted, userState);
        }
        
        private void OnGetCallsAtStopOperationCompleted(object arg) {
            if ((this.GetCallsAtStopCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCallsAtStopCompleted(this, new GetCallsAtStopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetDeparturesAtStopCompletedEventHandler(object sender, GetDeparturesAtStopCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeparturesAtStopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeparturesAtStopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetDirectJourneysBetweenStopsCompletedEventHandler(object sender, GetDirectJourneysBetweenStopsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDirectJourneysBetweenStopsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDirectJourneysBetweenStopsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetCallsAtStopCompletedEventHandler(object sender, GetCallsAtStopCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCallsAtStopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCallsAtStopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591