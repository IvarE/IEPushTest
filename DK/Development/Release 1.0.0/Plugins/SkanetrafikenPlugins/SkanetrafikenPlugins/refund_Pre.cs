using Microsoft.Xrm.Sdk;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.Text;
using CRM2013.SkanetrafikenPlugins.CubicService;
using CRM2013.SkanetrafikenPlugins.CreateGiftcardService;
using Microsoft.Xrm.Sdk.Query;
using System.Xml.Linq;

namespace CRM2013.SkanetrafikenPlugins {
  public class refund_Pre : IPlugin {
	private class plugindata : PlugindataBase {
	  public plugindata(IServiceProvider serviceProvider) : base(serviceProvider) { }
	}

	public void Execute(IServiceProvider serviceProvider) {
	  plugindata _data = new plugindata(serviceProvider);

	  try {

		if (_data.Context.InputParameters.Contains("Target") && _data.Context.InputParameters["Target"] is Entity) {
		  _data.Target = (Entity)_data.Context.InputParameters["Target"];

		  if (!_data.Target.Contains("cgi_reimbursementformid"))
			return;

		  //Check if contact has address if information is to be sent to Raindance.
		  if (_checkIfMandatoryAddress(_data) == true) {
			if (_checkIfContactHasAddress(_data) == false) {
			  throw new InvalidPluginExecutionException("Kunden saknar obligatorisk adress!");
			}
		  }

		  //kör inte detta för refunds som skapas automatiskt.
		  if (_data.Target.Contains("cgi_isautogenerated") && (bool)_data.Target["cgi_isautogenerated"])
			return;

		  ReimbursementHandler rh = new ReimbursementHandler();
		  rh.ExecuteRefundTransaction(_data.Target, false, _data.Service);

		  //EntityReference rf_id = _data.Target.GetAttributeValue<EntityReference>("cgi_reimbursementformid");
		  //Entity reimbursementForm = _data.Service.Retrieve(rf_id.LogicalName, rf_id.Id, new ColumnSet("cgi_loadcard", "cgi_giftcard"));
		  //if (reimbursementForm.GetAttributeValue<bool>("cgi_loadcard"))
		  //    LoadCard(_data);
		  //else if (reimbursementForm.GetAttributeValue<bool>("cgi_giftcard"))
		  //    CreateGiftcard(_data);

		  //if (_sendFileToStralfors(_data) == false)
		  //    throw new InvalidPluginExecutionException("Filen gick ej att skicka till strålfors");

		  //check if refund has attestation = true and cgi_soc_sec_number not exists as a field in target propery.
		  if (_data.Target.Contains("cgi_attestation") && !_data.Target.Contains("cgi_soc_sec_number"))
			_createRainDanceAutonumber(_data);

		}
	  }
	  catch (InvalidPluginExecutionException ex) {
		throw new Exception(String.Format("InvalidPluginExecutionException message: {0}", ex.Message));
	  }
	  catch (FaultException<OrganizationServiceFault> ex) {
          throw new Exception(String.Format("FaultException message: {0}", ex.Message));
	  }
	  catch (Exception ex) {
          throw new Exception(String.Format("Exception message: {0}", ex.Message));
	  }
	}

	#region Create giftcard

	private void CreateGiftcard(plugindata _data) {
	  using (CreateGiftcardService.BizTalkServiceInstance client = new CreateGiftcardService.BizTalkServiceInstance()) {

		Entity settings = GetSettings(_data);

		client.Url = settings.GetAttributeValue<string>("cgi_giftcardservice");

		EntityReference anonymousCustomer = settings.GetAttributeValue<EntityReference>("cgi_defaultcustomeroncase");

		EntityReference incidentReference = _data.Target.GetAttributeValue<EntityReference>("cgi_caseid");

		Entity incident = _data.Service.Retrieve(incidentReference.LogicalName, incidentReference.Id, new ColumnSet("customerid"));

		EntityReference customer = incident.GetAttributeValue<EntityReference>("customerid");

		if (anonymousCustomer.Id.Equals(customer.Id))
		  throw new InvalidPluginExecutionException("Kunde inte skapa värdekod för anonym kund!");

		CreateGiftCardRequest req = new CreateGiftCardRequest();

		req.CustomerId = customer.Id.ToString();

		_data.TracingService.Trace("CustomerId: " + req.CustomerId);

		req.CampaignTrackingCode = "";

		req.Currency = "SEK";

		_data.TracingService.Trace("Currency: " + req.Currency);

		req.Sum = _data.Target.GetAttributeValue<Money>("cgi_amount").Value;

		_data.TracingService.Trace("Sum: " + req.Sum.ToString());

		req.SumSpecified = true;

		req.ValidTo = _data.Target.GetAttributeValue<DateTime>("cgi_last_valid");

		_data.TracingService.Trace("ValidTo: " + req.ValidTo.ToString());

		req.ValidToSpecified = true;

		CreateGiftCardResponse res = client.GreateGiftCard(req);

		if (string.IsNullOrEmpty(res.Code))
		  throw new InvalidPluginExecutionException("Ett fel inträffade försök igen!");

		if (_data.Target.Contains("cgi_value_code"))
		  _data.Target.Attributes["cgi_value_code"] = res.Code;
		else
		  _data.Target.Attributes.Add("cgi_value_code", res.Code);


	  }
	}

	#endregion

	#region Load card

	private void LoadCard(plugindata _data) {
	  string _CardSerialNumber = _data.Target.Contains("cgi_travelcard_number") ? _data.Target.GetAttributeValue<string>("cgi_travelcard_number") : null;
	  Money _AmountToAdd = _data.Target.Contains("cgi_amount") ? _data.Target.GetAttributeValue<Money>("cgi_amount") : null;

	  if (_AmountToAdd == null || _CardSerialNumber == null)
		return;

	  using (CubicService.BizTalkServiceInstance client = new CubicService.BizTalkServiceInstance()) {
		Entity settings = GetSettings(_data);

		client.Url = settings.GetAttributeValue<string>("cgi_cubicservice");

		RequestPurseDirectedAutoload request = new RequestPurseDirectedAutoload();

		float _amountToAdd = (float)_AmountToAdd.Value;
		ulong _cardSerialNumber = Convert.ToUInt64(_CardSerialNumber);

		request.AmountToAdd = _amountToAdd;
		request.CardSerialNumber = _cardSerialNumber;
		request.Currency = "SEK";

		RequestPurseDirectedAutoloadResponse response = client.RequestPurseDirectedAutoload(request);

		long result = response.RequestPurseDirectedAutoloadResult;

		if (result == -1000) {
		  throw new InvalidPluginExecutionException("An Exception occured in Cubic Service!");
		}
		else if (result == -1) {
		  throw new InvalidPluginExecutionException("Pending autoload of this type already exists!");
		}
		else if (result == -2) {
		  throw new InvalidPluginExecutionException("The card is invalid!");
		}
		else if (result == -3) {
		  throw new InvalidPluginExecutionException("The requested amount is less than the minimum or maximum amounts!");
		}
		else {
		  if (_data.Target.Contains("cgi_attestation"))
			_data.Target.Attributes["cgi_attestation"] = new OptionSetValue(285050004); // Done
		  else
			_data.Target.Attributes.Add("cgi_attestation", new OptionSetValue(285050004)); // Done
		}
	  }
	}

	#endregion

	#region Send File To Strålfors

	private bool _sendFileToStralfors(plugindata data) {
	  bool _returnValue = true;

	  try {
		Entity _reimbursementForm = _getReimbursementForm(data);
		if (_reimbursementForm != null && _reimbursementForm.Attributes.Count() > 0) {
		  if (_reimbursementForm.Attributes.Contains("cgi_sendtostralfors")) {
			bool _sendfile = Convert.ToBoolean(_reimbursementForm.Attributes["cgi_sendtostralfors"]);
			if (_sendfile == true) {
			  Guid _g = Guid.NewGuid();
			  string _xmlfile = string.Format("D:\\Stralfors\\{0}.xml", _g.ToString());
			  account _account = _getCustomerFromCase(data);
			  XDocument _xmlStralfors = _createFile(data, _account);
			  if (_xmlStralfors != null) {
				_xmlStralfors.Save(_xmlfile);
			  }
			}
		  }
		}
	  }
	  catch (InvalidPluginExecutionException execex) {
		_returnValue = false;
		throw execex;
	  }
	  catch (Exception ex) {
		_returnValue = false;
		throw ex;
	  }

	  return _returnValue;
	}

	private account _getCustomerFromCase(plugindata data) {
	  account _returnValue = null;
	  EntityReference _caseref = new EntityReference();

	  if (data.Target.Attributes.Contains("cgi_caseid")) {
		_caseref = data.Target.Attributes["cgi_caseid"] as EntityReference;
		Guid _caseid = _caseref.Id;
		QueryByAttribute _query = new QueryByAttribute("incident");
		_query.ColumnSet = new ColumnSet(true);
		_query.Attributes.Add("incidentid");
		_query.Values.Add(_caseid);
		EntityCollection _ents = data.Service.RetrieveMultiple(_query);
		if (_ents != null && _ents.Entities.Count > 0) {
		  Entity _case = _ents[0];
		  Guid _id = Guid.Empty;
		  string _custtype = string.Empty;
		  if (_case.Attributes.Contains("cgi_contactid")) {
			EntityReference _entref = _case.Attributes["cgi_contactid"] as EntityReference;
			_id = _entref.Id;
			_custtype = "CONTACT";
		  }
		  else if (_case.Attributes.Contains("cgi_accountid")) {
			EntityReference _entref = _case.Attributes["cgi_accountid"] as EntityReference;
			_id = _entref.Id;
			_custtype = "ACCOUNT";
		  }

		  _returnValue = new account();

		  if (_custtype == "CONTACT") {
			QueryByAttribute _q = new QueryByAttribute("contact");
			_q.ColumnSet = new ColumnSet(true);
			_q.Attributes.Add("contactid");
			_q.Values.Add(_id);
			EntityCollection _contacts = data.Service.RetrieveMultiple(_q);
			if (_contacts != null && _contacts.Entities.Count() > 0) {
			  Entity _contact = _contacts.Entities[0];
			  if (_contact.Attributes.Contains("firstname"))
				_returnValue.FirstName = _contact.Attributes["firstname"].ToString();

			  if (_contact.Attributes.Contains("lastname"))
				_returnValue.LastName = _contact.Attributes["lastname"].ToString();

			  _returnValue.COAddress = "";

			  if (_contact.Attributes.Contains("emailaddress1"))
				_returnValue.Email = _contact.Attributes["emailaddress1"].ToString();

			  if (_contact.Attributes.Contains("address1_line1"))
				_returnValue.StreetAddress = _contact.Attributes["address1_line1"].ToString();

			  if (_contact.Attributes.Contains("address1_postalcode"))
				_returnValue.PostalAddress = _contact.Attributes["address1_postalcode"].ToString();

			  if (_contact.Attributes.Contains("address1_city"))
				_returnValue.City = _contact.Attributes["address1_city"].ToString();
			}
		  }

		  if (_custtype == "ACCOUNT") {
			QueryByAttribute _q = new QueryByAttribute("account");
			_q.ColumnSet = new ColumnSet(true);
			_q.Attributes.Add("accountid");
			_q.Values.Add(_id);
			EntityCollection _accounts = data.Service.RetrieveMultiple(_q);
			if (_accounts != null && _accounts.Entities.Count() > 0) {
			  Entity _account = _accounts.Entities[0];
			  if (_account.Attributes.Contains("name"))
				_returnValue.FirstName = _account.Attributes["name"].ToString();

			  _returnValue.LastName = string.Empty;
			  _returnValue.COAddress = "";

			  if (_account.Attributes.Contains("emailaddress1"))
				_returnValue.Email = _account.Attributes["emailaddress1"].ToString();

			  if (_account.Attributes.Contains("address1_line1"))
				_returnValue.StreetAddress = _account.Attributes["address1_line1"].ToString();

			  if (_account.Attributes.Contains("address1_postalcode"))
				_returnValue.PostalAddress = _account.Attributes["address1_postalcode"].ToString();

			  if (_account.Attributes.Contains("address1_city"))
				_returnValue.City = _account.Attributes["address1_city"].ToString();
			}
		  }
		}
	  }

	  return _returnValue;
	}

	private Entity _getReimbursementForm(plugindata data) {
	  Entity _returnValue = null;

	  EntityReference _reimbursement = data.Target.Attributes["cgi_reimbursementformid"] as EntityReference;
	  QueryByAttribute _query = new QueryByAttribute("cgi_reimbursementform");
	  _query.ColumnSet = new ColumnSet(true);
	  _query.Attributes.Add("cgi_reimbursementformid");
	  _query.Values.Add(_reimbursement.Id);
	  EntityCollection _ents = data.Service.RetrieveMultiple(_query);
	  if (_ents != null && _ents.Entities.Count() > 0) {
		_returnValue = _ents[0];
	  }

	  return _returnValue;

	}

	private XDocument _createFile(plugindata data, account account) {
	  Money _money = new Money(0);
	  if (data.Target.Attributes.Contains("cgi_amount"))
		_money = data.Target.GetAttributeValue<Money>("cgi_amount");

	  string _travelCardNumber = "";
	  if (data.Target.Attributes.Contains("cgi_travelcard_number"))
		_travelCardNumber = data.Target.Attributes["cgi_travelcard_number"].ToString();

	  XDocument _doc = new XDocument(new XDeclaration("1.0", "ISO-8859-1", ""),
		  new XElement("AutoRGDataCRM",
			  new XElement("FirstName", account.FirstName),
			  new XElement("LastName", account.LastName),
			  new XElement("CareOfAddress", account.COAddress),
			  new XElement("Email", account.Email),
			  new XElement("StreetAddress", account.StreetAddress),
			  new XElement("PostAddress", account.PostalAddress),
			  new XElement("JOJOCardNumber", _travelCardNumber),
			  new XElement("Money", _money.Value.ToString("0.00"))
			  )
		  );

	  return _doc;
	}

	private class account {
	  //<FirstName>Åsa</FirstName>
	  public string FirstName { get; set; }

	  //<LastName>Moberg</LastName>
	  public string LastName { get; set; }

	  //<CareOfAddress>Niklas Lagerholm</CareOfAddress>
	  public string COAddress { get; set; }

	  //<StreetAddress>Ponnygatan 11</StreetAddress>
	  public string StreetAddress { get; set; }

	  //<PostAddress>21235</PostAddress>
	  public string PostalAddress { get; set; }

	  //not yet in xml string ???
	  public string City { get; set; }

	  //<Email>asa.moberg@skanetrafiken.se</Email>
	  public string Email { get; set; }

	  //<JOJOCardNumber>2632448323</JOJOCardNumber>
	  public string CardNumber { get; set; }
	}

	#endregion

	#region Create autonumber to Raindance

	private void _createRainDanceAutonumber(plugindata data) {
	  OptionSetValue _op = data.Target.Attributes["cgi_attestation"] as OptionSetValue;
	  if (_op.Value == 285050004) {
		EntityReference _reimbursementFormid = data.Target.GetAttributeValue<EntityReference>("cgi_reimbursementformid");
		Entity reimbursementFormEnt = data.Service.Retrieve(_reimbursementFormid.LogicalName, _reimbursementFormid.Id, new ColumnSet("cgi_attestation"));
		if (reimbursementFormEnt.Contains("cgi_attestation")) {
		  //check if attestation = true
		  bool _att = reimbursementFormEnt.GetAttributeValue<bool>("cgi_attestation");
		  if (_att == true) {
			//create autonumber.
			//Update if exists.
			if (_checkIfAutonumberExists(data) == true) {
			  Entity _autonumber = _getAutoNumber(data);
			  if (_autonumber != null) {
				string _lastused = _autonumber.Attributes["cgi_lastused"].ToString();
				Int32 _nextnumber = Convert.ToInt32(_lastused) + 1;
				data.Target.Attributes["cgi_foreign_payment"] = _formatAutoNumber(_nextnumber.ToString(), data);
				_autonumber.Attributes["cgi_lastused"] = _nextnumber.ToString();
				data.Service.Update(_autonumber);
			  }
			}
			else //Create autonumber if not exists.
                        {
			  Entity _autonumber = new Entity();
			  _autonumber.LogicalName = "cgi_autonumber";
			  _autonumber.Attributes["cgi_entity"] = data.Target.LogicalName;
			  _autonumber.Attributes["cgi_lastused"] = "1";
			  data.Service.Create(_autonumber);
			  data.Target.Attributes["cgi_foreign_payment"] = _formatAutoNumber("1", data);
			}
		  }
		}
	  }
	}

	#endregion Create autonumber to Raindance

	#region Common

	private Entity GetSettings(plugindata _data) {
	  #region FetchXML

	  string _now = DateTime.Now.ToString("s");
	  string _xml = "";
	  _xml += "<fetch version='1.0' mapping='logical' distinct='false'>";
	  _xml += "   <entity name='cgi_setting'>";
	  _xml += "       <attribute name='cgi_settingid' />";
	  _xml += "       <attribute name='cgi_cubicservice' />";
	  _xml += "       <attribute name='cgi_giftcardservice' />";
	  _xml += "       <attribute name='cgi_defaultcustomeroncase' />";
	  _xml += "       <attribute name='cgi_raindanceprefix' />";
	  _xml += "       <filter type='and'>";
	  _xml += "           <condition attribute='statecode' operator='eq' value='0' />";
	  _xml += "           <condition attribute='cgi_validfrom' operator='on-or-before' value='" + _now + "' />";
	  _xml += "           <filter type='or'>";
	  _xml += "               <condition attribute='cgi_validto' operator='on-or-after' value='" + _now + "' />";
	  _xml += "               <condition attribute='cgi_validto' operator='null' />";
	  _xml += "           </filter>";
	  _xml += "       </filter>";
	  _xml += "   </entity>";
	  _xml += "</fetch>";

	  #endregion

	  FetchExpression _f = new FetchExpression(_xml);
	  EntityCollection settings = _data.Service.RetrieveMultiple(_f);

	  return settings.Entities.First();
	}

	#endregion

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Autonumber
	private bool _checkIfAutonumberExists(plugindata data) {
	  bool _returnvalue = false;

	  try {
		QueryByAttribute _query = new QueryByAttribute("cgi_autonumber");
		_query.ColumnSet = new ColumnSet("cgi_lastused");
		_query.Attributes.Add("cgi_entity");
		_query.Values.Add(data.Target.LogicalName);
		_query.Attributes.Add("statecode");
		_query.Values.Add(0);
		EntityCollection _autonumbers = data.Service.RetrieveMultiple(_query);
		if (_autonumbers != null && _autonumbers.Entities.Count() > 0) {
		  _returnvalue = true;
		}
	  }
	  catch (Exception ex) {
		throw new Exception(ex.Message);
	  }

	  return _returnvalue;
	}

	private Entity _getAutoNumber(plugindata data) {
	  Entity _returnvalue = null;

	  try {
		QueryByAttribute _query = new QueryByAttribute("cgi_autonumber");
		_query.ColumnSet = new ColumnSet("cgi_lastused");
		_query.Attributes.Add("cgi_entity");
		_query.Values.Add(data.Target.LogicalName);
		_query.Attributes.Add("statecode");
		_query.Values.Add(0);
		EntityCollection _autonumbers = data.Service.RetrieveMultiple(_query);
		if (_autonumbers != null && _autonumbers.Entities.Count() > 0) {
		  _returnvalue = _autonumbers[0] as Entity;
		}
	  }
	  catch (Exception ex) {
		throw new Exception(ex.Message);
	  }

	  return _returnvalue;
	}

	private string _formatAutoNumber(string input, plugindata data) {
	  string _returnValue = "";

	  try {
		string _prefix = "";
		Entity _ent = GetSettings(data);
		if (_ent != null) {
		  if (_ent.Attributes.Contains("cgi_raindanceprefix"))
			_prefix = _ent.Attributes["cgi_raindanceprefix"].ToString();
		  else
			throw new InvalidPluginExecutionException("Hittar inga systeminställningar!");
		}

		int _length = 8 - _prefix.Length;
		string _number = input.PadLeft(_length, '0');
		_returnValue = string.Format("{0}{1}", _prefix, _number);
	  }
	  catch (Exception ex) {
		throw new Exception(ex.Message);
	  }

	  return _returnValue;
	}

	private bool _checkIfMandatoryAddress(plugindata data) {
	  bool _returnValue = false;

	  try {
		EntityReference _id = data.Target.Attributes["cgi_reimbursementformid"] as EntityReference;
		string _sid = _id.Id.ToString();

		string _xml = "";

		_xml += "<fetch version='1.0' mapping='logical' distinct='false'>";
		_xml += "   <entity name='cgi_reimbursementform'>";
		_xml += "       <attribute name='cgi_reimbursementformid' />";
		_xml += "       <attribute name='cgi_payment_abroad' />";
		_xml += "       <attribute name='cgi_payment' />";
		_xml += "       <filter type='and'>";
		_xml += "           <condition attribute='cgi_reimbursementformid' operator='eq' value='" + _sid + "' />";
		_xml += "           <condition attribute='statecode' operator='eq' value='0' />";
		_xml += "       </filter>";
		_xml += "   </entity>";
		_xml += "</fetch>";

		FetchExpression _f = new FetchExpression(_xml);
		EntityCollection _ents = data.Service.RetrieveMultiple(_f);
		if (_ents != null && _ents.Entities.Count() > 0) {
		  bool _checkaddress = false;
		  Entity _ent = _ents[0];
		  if (_ent.Attributes.Contains("cgi_payment_abroad")) {
			bool _payment_abroad = Convert.ToBoolean(_ent.Attributes["cgi_payment_abroad"]);
			if (_payment_abroad == true)
			  _checkaddress = true;
		  }

		  if (_ent.Attributes.Contains("cgi_payment")) {
			bool _payment = Convert.ToBoolean(_ent.Attributes["cgi_payment"]);
			if (_payment == true)
			  _checkaddress = true;
		  }

		  if (_checkaddress == true)
			_returnValue = true;
		}
	  }
	  catch (Exception ex) {
		throw ex;
	  }

	  return _returnValue;
	}

	private bool _checkIfContactHasAddress(plugindata data) {
	  try {
		EntityReference _id = data.Target.Attributes["cgi_caseid"] as EntityReference;
		string _sid = _id.Id.ToString();

		FetchExpression _fetchcase = new FetchExpression(_xmlCase(_sid));
		EntityCollection _ents = data.Service.RetrieveMultiple(_fetchcase);
		if (_ents != null && _ents.Entities.Count() > 0) {
		  Entity _case = _ents[0];
		  if (_case.Attributes.Contains("cgi_contactid")) {
			EntityReference _contactid = _case.Attributes["cgi_contactid"] as EntityReference;
			string _scontactid = _contactid.Id.ToString();

			FetchExpression _fetchcontact = new FetchExpression(_xmlContact(_scontactid));
			EntityCollection _contacts = data.Service.RetrieveMultiple(_fetchcontact);
			if (_contacts != null && _contacts.Entities.Count() > 0) {
			  bool _hasaddressitem1 = true;
			  bool _hasaddressitem2 = true;
			  bool _hasaddressitem3 = true;
			  Entity _contact = _contacts[0];

			  if (!_contact.Attributes.Contains("address1_line2"))
				_hasaddressitem1 = false;
			  if (!_contact.Attributes.Contains("address1_city"))
				_hasaddressitem2 = false;
			  if (!_contact.Attributes.Contains("address1_postalcode"))
				_hasaddressitem3 = false;

			  return !(_hasaddressitem1 == false || _hasaddressitem2 == false || _hasaddressitem3 == false);
				
			  
			  //  throw new InvalidPluginExecutionException("Kunden saknar gatuadress!");
			  //if (_hasaddressitem2 == false)
			  //  throw new InvalidPluginExecutionException("Kunden saknar ort!");
			  //if (_hasaddressitem3 == false)
			  //  throw new InvalidPluginExecutionException("Kunden saknar postadress!");
			}
		  }
		}
		return false;
	  }
	  catch (Exception ex) {
		throw ex;
	  }
	}

	private string _xmlContact(string contactid) {
	  string _xml = "";

	  _xml += "<fetch version='1.0' mapping='logical' distinct='false'>";
	  _xml += "    <entity name='contact'>";
	  _xml += "        <attribute name='contactid' />";
	  _xml += "        <attribute name='lastname' />";
	  _xml += "        <attribute name='firstname' />";
	  _xml += "        <attribute name='address1_line2' />";
	  _xml += "        <attribute name='address1_city' />";
	  _xml += "        <attribute name='address1_postalcode' />";
	  _xml += "        <filter type='and'>";
	  _xml += "            <condition attribute='contactid' operator='eq' value='" + contactid + "' />";
	  _xml += "        </filter>";
	  _xml += "    </entity>";
	  _xml += "</fetch>";

	  return _xml;
	}

	private string _xmlCase(string caseid) {
	  string _xml = "";

	  _xml += "<fetch version='1.0' mapping='logical' distinct='false'>";
	  _xml += "   <entity name='incident'>";
	  _xml += "       <attribute name='ticketnumber' />";
	  _xml += "       <attribute name='cgi_contactid' />";
	  _xml += "       <attribute name='cgi_accountid' />";
	  _xml += "       <filter type='and'>";
	  _xml += "           <condition attribute='incidentid' operator='eq' value='" + caseid + "' />";
	  _xml += "       </filter>";
	  _xml += "   </entity>";
	  _xml += "</fetch>";

	  return _xml;
	}


  }
}
