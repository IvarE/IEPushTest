using Microsoft.Xrm.Sdk;
using System;
using System.Linq;
using System.ServiceModel;
using Microsoft.Xrm.Sdk.Query;
using CRM2013.SkanetrafikenPlugins.Common;

namespace CRM2013.SkanetrafikenPlugins
{
    public class refund_Pre : IPlugin
    {
        #region Public Methods
        public void Execute(IServiceProvider serviceProvider)
        {
            PluginData data = new PluginData(serviceProvider);

            try
            {

                if (data.Context.InputParameters.Contains("Target") && data.Context.InputParameters["Target"] is Entity)
                {
                    data.Target = (Entity)data.Context.InputParameters["Target"];

                    // Set the validto attribute on refund with validto data from settings
                    if (data.Target.Contains("cgi_refundtypeid") && data.Target["cgi_refundtypeid"] != null)
                    {
                        EntityReference refundTypeid = data.Target.GetAttributeValue<EntityReference>("cgi_refundtypeid");
                        Entity refundType = data.Service.Retrieve("cgi_refundtype", refundTypeid.Id, new ColumnSet("cgi_refundtypename"));
                        object refundTypeName;
                        if (refundType != null && refundType.Attributes.TryGetValue("cgi_refundtypename", out refundTypeName))
                        {
                            if (refundTypeName!=null && refundTypeName.ToString().Trim().ToUpperInvariant() == "Resegaranti Online".ToUpperInvariant())
                            {
                                var valueCodeValidDate = Utilities.GetSetting<DateTime>(data.Service, "cgi_valuecodevaliddate"); 
                                int valueCodeValidForMonths = Utilities.GetSetting<int>(data.Service, "cgi_valuecodevalidformonths");

                                if (valueCodeValidForMonths >= 1)
                                    data.Target.Attributes["cgi_last_valid"] = DateTime.Now.AddMonths(valueCodeValidForMonths);
                                else if (valueCodeValidDate > DateTime.Now)
                                    data.Target.Attributes["cgi_last_valid"] = valueCodeValidDate;
                                else
                                    data.Target.Attributes["cgi_last_valid"] = DateTime.Now;
                            }
                        }
                    }

                    if (!data.Target.Contains("cgi_reimbursementformid"))
                        return;
                    //Reimbursement form har angivits
                    if (!(data.Target.Contains("cgi_vat_code") && data.Target["cgi_vat_code"] != null))
                    {
                        //VAT-code har INTE angivits och därför kontrolleras ifall det är ett krav för denna reimbursement form

                        EntityReference rfId = data.Target.GetAttributeValue<EntityReference>("cgi_reimbursementformid");
                        Entity reimbursementForm = data.Service.Retrieve(rfId.LogicalName, rfId.Id, new ColumnSet("cgi_useaccount"));
                        if (reimbursementForm.Contains("cgi_useaccount") && reimbursementForm.GetAttributeValue<bool>("cgi_useaccount"))
                        {
                            throw new InvalidPluginExecutionException("Momskod måste anges för angiven utbetalningsform!");
                        }
                    }

                    //Check if contact has address if information is to be sent to Raindance.
                    if (_checkIfMandatoryAddress(data))
                    {
                        if (_checkIfContactHasAddress(data) == false)
                        {
                            throw new InvalidPluginExecutionException("Kunden saknar obligatorisk adress!");
                        }
                    }

                    //kör inte detta för refunds som skapas automatiskt.
                    if (data.Target.Contains("cgi_isautogenerated") && (bool)data.Target["cgi_isautogenerated"])
                        return;

                    ReimbursementHandler rh = new ReimbursementHandler();
                    rh.ExecuteRefundTransaction(data.Target, false, data.Service);

                    //check if refund has attestation = true and cgi_soc_sec_number not exists as a field in target propery.
                    if (data.Target.Contains("cgi_attestation") && !data.Target.Contains("cgi_soc_sec_number"))
                        _createRainDanceAutonumber(data);

                }
            }
            catch (InvalidPluginExecutionException ex)
            {
                throw new Exception(String.Format("InvalidPluginExecutionException message: {0}", ex.Message));
            }
            catch (FaultException<OrganizationServiceFault> ex)
            {
                throw new Exception(String.Format("FaultException message: {0}", ex.Message));
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("Exception message: {0}", ex.Message));
            }
        }
        #endregion

        #region Private Methods


        #region Create autonumber to Raindance

        private void _createRainDanceAutonumber(PluginData data)
        {
            OptionSetValue op = data.Target.Attributes["cgi_attestation"] as OptionSetValue;
            if (op != null && op.Value == 285050004)
            {
                EntityReference reimbursementFormid = data.Target.GetAttributeValue<EntityReference>("cgi_reimbursementformid");
                Entity reimbursementFormEnt = data.Service.Retrieve(reimbursementFormid.LogicalName, reimbursementFormid.Id, new ColumnSet("cgi_attestation"));
                if (reimbursementFormEnt.Contains("cgi_attestation"))
                {
                    //check if attestation = true
                    bool att = reimbursementFormEnt.GetAttributeValue<bool>("cgi_attestation");
                    if (att)
                    {
                        //create autonumber.
                        //Update if exists.
                        if (_checkIfAutonumberExists(data))
                        {
                            Entity autonumber = _getAutoNumber(data);
                            if (autonumber != null)
                            {
                                string lastused = autonumber.Attributes["cgi_lastused"].ToString();
                                Int32 nextnumber = Convert.ToInt32(lastused) + 1;
                                data.Target.Attributes["cgi_foreign_payment"] = _formatAutoNumber(nextnumber.ToString(), data);
                                autonumber.Attributes["cgi_lastused"] = nextnumber.ToString();
                                data.Service.Update(autonumber);
                            }
                        }
                        else //Create autonumber if not exists.
                        {
                            Entity autonumber = new Entity
                            {
                                LogicalName = "cgi_autonumber"
                            };
                            autonumber.Attributes["cgi_entity"] = data.Target.LogicalName;
                            autonumber.Attributes["cgi_lastused"] = "1";
                            data.Service.Create(autonumber);
                            data.Target.Attributes["cgi_foreign_payment"] = _formatAutoNumber("1", data);
                        }
                    }
                }
            }
        }

        #endregion Create autonumber to Raindance

        #region Common

        private Entity GetSettings(PluginData data)
        {
            #region FetchXML

            string now = DateTime.Now.ToString("s");
            string xml = "";
            xml += "<fetch version='1.0' mapping='logical' distinct='false'>";
            xml += "   <entity name='cgi_setting'>";
            xml += "       <attribute name='cgi_settingid' />";
            xml += "       <attribute name='cgi_cubicservice' />";
            xml += "       <attribute name='cgi_giftcardservice' />";
            xml += "       <attribute name='cgi_defaultcustomeroncase' />";
            xml += "       <attribute name='cgi_raindanceprefix' />";
            xml += "       <filter type='and'>";
            xml += "           <condition attribute='statecode' operator='eq' value='0' />";
            xml += "           <condition attribute='cgi_validfrom' operator='on-or-before' value='" + now + "' />";
            xml += "           <filter type='or'>";
            xml += "               <condition attribute='cgi_validto' operator='on-or-after' value='" + now + "' />";
            xml += "               <condition attribute='cgi_validto' operator='null' />";
            xml += "           </filter>";
            xml += "       </filter>";
            xml += "   </entity>";
            xml += "</fetch>";

            #endregion

            FetchExpression f = new FetchExpression(xml);
            EntityCollection settings = data.Service.RetrieveMultiple(f);

            return settings.Entities.First();
        }

        #endregion

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //Autonumber
        private bool _checkIfAutonumberExists(PluginData data)
        {
            bool returnvalue = false;

            try
            {
                QueryByAttribute query = new QueryByAttribute("cgi_autonumber")
                {
                    ColumnSet = new ColumnSet("cgi_lastused")
                };
                query.Attributes.Add("cgi_entity");
                query.Values.Add(data.Target.LogicalName);
                query.Attributes.Add("statecode");
                query.Values.Add(0);
                EntityCollection autonumbers = data.Service.RetrieveMultiple(query);
                if (autonumbers != null && autonumbers.Entities.Any())
                {
                    returnvalue = true;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }

            return returnvalue;
        }

        private Entity _getAutoNumber(PluginData data)
        {
            Entity returnvalue = null;

            try
            {
                QueryByAttribute query = new QueryByAttribute("cgi_autonumber")
                {
                    ColumnSet = new ColumnSet("cgi_lastused")
                };
                query.Attributes.Add("cgi_entity");
                query.Values.Add(data.Target.LogicalName);
                query.Attributes.Add("statecode");
                query.Values.Add(0);
                EntityCollection autonumbers = data.Service.RetrieveMultiple(query);
                if (autonumbers != null && autonumbers.Entities.Any())
                {
                    returnvalue = autonumbers[0];
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }

            return returnvalue;
        }

        private string _formatAutoNumber(string input, PluginData data)
        {
            string returnValue;

            try
            {
                string prefix = "";
                Entity ent = GetSettings(data);
                if (ent != null)
                {
                    if (ent.Attributes.Contains("cgi_raindanceprefix"))
                        prefix = ent.Attributes["cgi_raindanceprefix"].ToString();
                    else
                        throw new InvalidPluginExecutionException("Hittar inga systeminställningar!");
                }

                int length = 8 - prefix.Length;
                string number = input.PadLeft(length, '0');
                returnValue = string.Format("{0}{1}", prefix, number);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }

            return returnValue;
        }

        private bool _checkIfMandatoryAddress(PluginData data)
        {
            bool returnValue = false;

            try
            {
                EntityReference id = data.Target.Attributes["cgi_reimbursementformid"] as EntityReference;
                if (id != null)
                {
                    string sid = id.Id.ToString();

                    string xml = "";

                    xml += "<fetch version='1.0' mapping='logical' distinct='false'>";
                    xml += "   <entity name='cgi_reimbursementform'>";
                    xml += "       <attribute name='cgi_reimbursementformid' />";
                    xml += "       <attribute name='cgi_payment_abroad' />";
                    xml += "       <attribute name='cgi_payment' />";
                    xml += "       <filter type='and'>";
                    xml += "           <condition attribute='cgi_reimbursementformid' operator='eq' value='" + sid + "' />";
                    xml += "           <condition attribute='statecode' operator='eq' value='0' />";
                    xml += "       </filter>";
                    xml += "   </entity>";
                    xml += "</fetch>";

                    FetchExpression f = new FetchExpression(xml);
                    EntityCollection ents = data.Service.RetrieveMultiple(f);
                    if (ents != null && ents.Entities.Any())
                    {
                        bool checkaddress = false;
                        Entity ent = ents[0];
                        if (ent.Attributes.Contains("cgi_payment_abroad"))
                        {
                            bool paymentAbroad = Convert.ToBoolean(ent.Attributes["cgi_payment_abroad"]);
                            if (paymentAbroad)
                                checkaddress = true;
                        }

                        if (ent.Attributes.Contains("cgi_payment"))
                        {
                            bool payment = Convert.ToBoolean(ent.Attributes["cgi_payment"]);
                            if (payment)
                                checkaddress = true;
                        }

                        if (checkaddress)
                            returnValue = true;
                    }
                }
            }
            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException(ex.Message);
            }

            return returnValue;
        }

        private bool _checkIfContactHasAddress(PluginData data)
        {
            try
            {
                EntityReference id = data.Target.Attributes["cgi_caseid"] as EntityReference;
                if (id != null)
                {
                    string sid = id.Id.ToString();

                    FetchExpression fetchcase = new FetchExpression(_xmlCase(sid));
                    EntityCollection ents = data.Service.RetrieveMultiple(fetchcase);
                    if (ents != null && ents.Entities.Any())
                    {
                        Entity _case = ents[0];
                        if (_case.Attributes.Contains("cgi_contactid"))
                        {
                            EntityReference contactid = _case.Attributes["cgi_contactid"] as EntityReference;
                            if (contactid != null)
                            {
                                string scontactid = contactid.Id.ToString();

                                FetchExpression fetchcontact = new FetchExpression(_xmlContact(scontactid));
                                EntityCollection contacts = data.Service.RetrieveMultiple(fetchcontact);
                                if (contacts != null && contacts.Entities.Any())
                                {
                                    bool hasaddressitem1 = true;
                                    bool hasaddressitem2 = true;
                                    bool hasaddressitem3 = true;
                                    Entity contact = contacts[0];

                                    if (!contact.Attributes.Contains("address1_line2"))
                                        hasaddressitem1 = false;
                                    if (!contact.Attributes.Contains("address1_city"))
                                        hasaddressitem2 = false;
                                    if (!contact.Attributes.Contains("address1_postalcode"))
                                        hasaddressitem3 = false;

                                    return !(hasaddressitem1 == false || hasaddressitem2 == false || hasaddressitem3 == false);
                                }
                            }
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException(ex.Message);
            }
        }

        private string _xmlContact(string contactid)
        {
            string xml = "";

            xml += "<fetch version='1.0' mapping='logical' distinct='false'>";
            xml += "    <entity name='contact'>";
            xml += "        <attribute name='contactid' />";
            xml += "        <attribute name='lastname' />";
            xml += "        <attribute name='firstname' />";
            xml += "        <attribute name='address1_line2' />";
            xml += "        <attribute name='address1_city' />";
            xml += "        <attribute name='address1_postalcode' />";
            xml += "        <filter type='and'>";
            xml += "            <condition attribute='contactid' operator='eq' value='" + contactid + "' />";
            xml += "        </filter>";
            xml += "    </entity>";
            xml += "</fetch>";

            return xml;
        }

        private string _xmlCase(string caseid)
        {
            string xml = "";

            xml += "<fetch version='1.0' mapping='logical' distinct='false'>";
            xml += "   <entity name='incident'>";
            xml += "       <attribute name='ticketnumber' />";
            xml += "       <attribute name='cgi_contactid' />";
            xml += "       <attribute name='cgi_accountid' />";
            xml += "       <filter type='and'>";
            xml += "           <condition attribute='incidentid' operator='eq' value='" + caseid + "' />";
            xml += "       </filter>";
            xml += "   </entity>";
            xml += "</fetch>";

            return xml;
        }
        #endregion
    }
}
