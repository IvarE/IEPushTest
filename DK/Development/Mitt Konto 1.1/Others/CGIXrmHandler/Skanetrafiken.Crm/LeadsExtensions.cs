// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using CGIXrmHandler.CRMPlusAPI;
using CGIXrmHandler.CRMPlusAPI.Models;
using Microsoft.Rest;

namespace CGIXrmHandler.CRMPlusAPI
{
    public static partial class LeadsExtensions
    {
        /// <param name='operations'>
        /// Reference to the CGIXrmHandler.CRMPlusAPI.ILeads.
        /// </param>
        public static string Get(this ILeads operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ILeads)s).GetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the CGIXrmHandler.CRMPlusAPI.ILeads.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetAsync(this ILeads operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the CGIXrmHandler.CRMPlusAPI.ILeads.
        /// </param>
        /// <param name='idOrEmail'>
        /// Required.
        /// </param>
        public static string GetLatestLinkGuid(this ILeads operations, string idOrEmail)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ILeads)s).GetLatestLinkGuidAsync(idOrEmail);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the CGIXrmHandler.CRMPlusAPI.ILeads.
        /// </param>
        /// <param name='idOrEmail'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetLatestLinkGuidAsync(this ILeads operations, string idOrEmail, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetLatestLinkGuidWithOperationResponseAsync(idOrEmail, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the CGIXrmHandler.CRMPlusAPI.ILeads.
        /// </param>
        /// <param name='idOrEmail'>
        /// Required.
        /// </param>
        public static string GetWithIdOrEmail(this ILeads operations, string idOrEmail)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ILeads)s).GetWithIdOrEmailAsync(idOrEmail);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the CGIXrmHandler.CRMPlusAPI.ILeads.
        /// </param>
        /// <param name='idOrEmail'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetWithIdOrEmailAsync(this ILeads operations, string idOrEmail, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetWithIdOrEmailWithOperationResponseAsync(idOrEmail, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the CGIXrmHandler.CRMPlusAPI.ILeads.
        /// </param>
        /// <param name='info'>
        /// Required.
        /// </param>
        public static string Post(this ILeads operations, CustomerInfo info)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ILeads)s).PostAsync(info);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the CGIXrmHandler.CRMPlusAPI.ILeads.
        /// </param>
        /// <param name='info'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> PostAsync(this ILeads operations, CustomerInfo info, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.PostWithOperationResponseAsync(info, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the CGIXrmHandler.CRMPlusAPI.ILeads.
        /// </param>
        /// <param name='time'>
        /// Required.
        /// </param>
        /// <param name='price'>
        /// Required.
        /// </param>
        /// <param name='info'>
        /// Required.
        /// </param>
        public static string Post2Param(this ILeads operations, string time, int price, CustomerInfo info)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ILeads)s).Post2ParamAsync(time, price, info);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the CGIXrmHandler.CRMPlusAPI.ILeads.
        /// </param>
        /// <param name='time'>
        /// Required.
        /// </param>
        /// <param name='price'>
        /// Required.
        /// </param>
        /// <param name='info'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> Post2ParamAsync(this ILeads operations, string time, int price, CustomerInfo info, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.Post2ParamWithOperationResponseAsync(time, price, info, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the CGIXrmHandler.CRMPlusAPI.ILeads.
        /// </param>
        /// <param name='idOrEmail'>
        /// Required.
        /// </param>
        /// <param name='info'>
        /// Required.
        /// </param>
        public static string Put(this ILeads operations, string idOrEmail, CustomerInfo info)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ILeads)s).PutAsync(idOrEmail, info);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the CGIXrmHandler.CRMPlusAPI.ILeads.
        /// </param>
        /// <param name='idOrEmail'>
        /// Required.
        /// </param>
        /// <param name='info'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> PutAsync(this ILeads operations, string idOrEmail, CustomerInfo info, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.PutWithOperationResponseAsync(idOrEmail, info, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
